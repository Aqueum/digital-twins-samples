// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ADTApi
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// DigitalTwins operations.
    /// </summary>
    public partial interface IDigitalTwins
    {
        /// <summary>
        /// Retrieves a digital twin instance.
        /// </summary>
        /// <param name='id'>
        /// The id of the digital twin.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<object>> GetByIdWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Adds a new digital twin instance. If a twin with this id already
        /// exists a 409 Conflict error is returned.
        /// </summary>
        /// <param name='id'>
        /// The id of the digital twin.
        /// </param>
        /// <param name='twin'>
        /// The digital twin instance being added.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<object>> AddWithHttpMessagesAsync(string id, object twin, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deletes a digital twin. All edges referencing this digital twin
        /// must already be deleted.
        /// </summary>
        /// <param name='id'>
        /// The id of the digital twin.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> DeleteWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates a digital twin
        /// </summary>
        /// <param name='id'>
        /// The id of the digital twin.
        /// </param>
        /// <param name='patchDocument'>
        /// An update specification described by JSON-patch. Updates to
        /// property values and $model elements may happen in the same request.
        /// Operations are limited to add, replace and remove.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<object>> UpdateWithHttpMessagesAsync(string id, object patchDocument, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieves an edge which connects two digital twins.
        /// </summary>
        /// <param name='id'>
        /// The id of the digital twin.
        /// </param>
        /// <param name='relationship'>
        /// The name of the relationship which is having its edges retrieved.
        /// </param>
        /// <param name='edgeId'>
        /// The id of the edge which is being retrieved
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<object>> GetEdgeByIdWithHttpMessagesAsync(string id, string relationship, string edgeId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Adds an edge between two digital twins.
        /// </summary>
        /// <param name='id'>
        /// The id of the digital twin.
        /// </param>
        /// <param name='relationship'>
        /// The name of the relationship which is having its edges modified.
        /// </param>
        /// <param name='edgeId'>
        /// The id of the edge which is being added
        /// </param>
        /// <param name='edge'>
        /// The instance data for the edge being added
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<object>> AddEdgeWithHttpMessagesAsync(string id, string relationship, string edgeId, object edge = default(object), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deletes an edge between two digital twins.
        /// </summary>
        /// <param name='id'>
        /// The id of the digital twin.
        /// </param>
        /// <param name='relationship'>
        /// The name of the relationship which is having its edges deleted.
        /// </param>
        /// <param name='edgeId'>
        /// The id of the edge to delete.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> DeleteEdgeWithHttpMessagesAsync(string id, string relationship, string edgeId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates the properties on an edge between two digital twins.
        /// </summary>
        /// <param name='id'>
        /// The id of the digital twin.
        /// </param>
        /// <param name='relationship'>
        /// The name of the relationship which is having its edges modified.
        /// </param>
        /// <param name='edgeId'>
        /// The id of the edge which is being updated.
        /// </param>
        /// <param name='patchDocument'>
        /// JSON-Patch description of update to edge properties.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> UpdateEdgeWithHttpMessagesAsync(string id, string relationship, string edgeId, object patchDocument = default(object), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieves the edges from a digital twin.
        /// </summary>
        /// <param name='id'>
        /// The id of the digital twin.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<EdgeCollection>> ListEdgesWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieves edges from a digital twin for the named relationship.
        /// </summary>
        /// <param name='id'>
        /// The id of the digital twin.
        /// </param>
        /// <param name='relationship'>
        /// The name of the relationship having its edges retrieved.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<EdgeCollection>> ListEdgesByRelationshipWithHttpMessagesAsync(string id, string relationship, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieves all incoming relationships for a digital twin.
        /// </summary>
        /// <param name='id'>
        /// The id of the digital twin.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IncomingEdgeCollection>> ListIncomingEdgesWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send telemetry from a twin
        /// </summary>
        /// <param name='id'>
        /// The id of the digital twin.
        /// </param>
        /// <param name='ceId'>
        /// A string which uniquely identifies the message
        /// </param>
        /// <param name='ceDataschema'>
        /// A string that describes the model ID (DTMI) that contains the
        /// definition for the telemetry message.
        /// </param>
        /// <param name='ceSpecversion'>
        /// A string that describes the version of the CloudEvents
        /// specification. Must be '1.0'.
        /// </param>
        /// <param name='ceType'>
        /// A string the describes the type of the message. Must be
        /// 'microsoft.iot.telemetry'.
        /// </param>
        /// <param name='telemetry'>
        /// The telemetry to emit from the instance.
        /// </param>
        /// <param name='ceDatacontenttype'>
        /// A string which describes the content type.
        /// </param>
        /// <param name='ceSubject'>
        /// A dot-seperated string that identifies the DTDL component sending
        /// the telemetry.
        /// </param>
        /// <param name='ceTime'>
        /// A string that describes the time associated with the telemetry
        /// message in RFC 3339 format.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> SendTelemetryWithHttpMessagesAsync(string id, string ceId, string ceDataschema, string ceSpecversion, string ceType, object telemetry = default(object), string ceDatacontenttype = default(string), string ceSubject = default(string), string ceTime = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieves a component from a digital twin.
        /// </summary>
        /// <param name='id'>
        /// The id of the digital twin.
        /// </param>
        /// <param name='componentPath'>
        /// The dotted path for the component.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<object>> GetComponentWithHttpMessagesAsync(string id, string componentPath, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates a component on a digital twin.
        /// </summary>
        /// <param name='id'>
        /// The id of the digital twin.
        /// </param>
        /// <param name='componentPath'>
        /// The dotted path for the component.
        /// </param>
        /// <param name='patchDocument'>
        /// An update specification described by JSON-patch. Updates to
        /// property values and $model elements may happen in the same request.
        /// Operations are limited to add, replace and remove.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<object>> UpdateComponentWithHttpMessagesAsync(string id, string componentPath, object patchDocument = default(object), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
