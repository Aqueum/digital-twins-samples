// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ADTApi
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ModelsOperations.
    /// </summary>
    public static partial class ModelsOperationsExtensions
    {
            /// <summary>
            /// Add one or more models.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='models'>
            /// An array of models to add.
            /// </param>
            public static IList<ModelData> Add(this IModelsOperations operations, IList<object> models = default(IList<object>))
            {
                return operations.AddAsync(models).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add one or more models.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='models'>
            /// An array of models to add.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ModelData>> AddAsync(this IModelsOperations operations, IList<object> models = default(IList<object>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddWithHttpMessagesAsync(models, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve model metadata and optionally model definitions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dependenciesFor'>
            /// The set of the models which will have their dependencies retrieved. If
            /// omitted, all models are retrieved.
            /// </param>
            /// <param name='includeModelDefinition'>
            /// When true the model definition will be returned as part of the result.
            /// </param>
            /// <param name='modelsListOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static PagedModelDataCollection List(this IModelsOperations operations, IList<string> dependenciesFor = default(IList<string>), bool? includeModelDefinition = false, ModelsListOptions modelsListOptions = default(ModelsListOptions))
            {
                return operations.ListAsync(dependenciesFor, includeModelDefinition, modelsListOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve model metadata and optionally model definitions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dependenciesFor'>
            /// The set of the models which will have their dependencies retrieved. If
            /// omitted, all models are retrieved.
            /// </param>
            /// <param name='includeModelDefinition'>
            /// When true the model definition will be returned as part of the result.
            /// </param>
            /// <param name='modelsListOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedModelDataCollection> ListAsync(this IModelsOperations operations, IList<string> dependenciesFor = default(IList<string>), bool? includeModelDefinition = false, ModelsListOptions modelsListOptions = default(ModelsListOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(dependenciesFor, includeModelDefinition, modelsListOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves model metadata and optionally the model definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id for the model.
            /// </param>
            /// <param name='includeModelDefinition'>
            /// When true the model definition will be returned as part of the result.
            /// </param>
            public static ModelData GetById(this IModelsOperations operations, string id, bool? includeModelDefinition = false)
            {
                return operations.GetByIdAsync(id, includeModelDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves model metadata and optionally the model definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id for the model.
            /// </param>
            /// <param name='includeModelDefinition'>
            /// When true the model definition will be returned as part of the result.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ModelData> GetByIdAsync(this IModelsOperations operations, string id, bool? includeModelDefinition = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByIdWithHttpMessagesAsync(id, includeModelDefinition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the metadata for a model.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id for the model.
            /// </param>
            /// <param name='updateModel'>
            /// An update specification described by JSON-patch. Only the decommissioned
            /// property can be replaced.
            /// </param>
            public static void Update(this IModelsOperations operations, string id, object updateModel)
            {
                operations.UpdateAsync(id, updateModel).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the metadata for a model.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id for the model.
            /// </param>
            /// <param name='updateModel'>
            /// An update specification described by JSON-patch. Only the decommissioned
            /// property can be replaced.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateAsync(this IModelsOperations operations, string id, object updateModel, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateWithHttpMessagesAsync(id, updateModel, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
