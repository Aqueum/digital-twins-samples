// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ADTApi
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DigitalTwins.
    /// </summary>
    public static partial class DigitalTwinsExtensions
    {
            /// <summary>
            /// Retrieves a digital twin instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin.
            /// </param>
            public static object GetById(this IDigitalTwins operations, string id)
            {
                return operations.GetByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a digital twin instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetByIdAsync(this IDigitalTwins operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a new digital twin instance. If a twin with this id already exists a
            /// 409 Conflict error is returned.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin.
            /// </param>
            /// <param name='twin'>
            /// The digital twin instance being added.
            /// </param>
            public static object Add(this IDigitalTwins operations, string id, object twin)
            {
                return operations.AddAsync(id, twin).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new digital twin instance. If a twin with this id already exists a
            /// 409 Conflict error is returned.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin.
            /// </param>
            /// <param name='twin'>
            /// The digital twin instance being added.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AddAsync(this IDigitalTwins operations, string id, object twin, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddWithHttpMessagesAsync(id, twin, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a digital twin. All edges referencing this digital twin must
            /// already be deleted.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin.
            /// </param>
            public static void Delete(this IDigitalTwins operations, string id)
            {
                operations.DeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a digital twin. All edges referencing this digital twin must
            /// already be deleted.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IDigitalTwins operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates a digital twin
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin.
            /// </param>
            /// <param name='patchDocument'>
            /// An update specification described by JSON-patch. Updates to property values
            /// and $model elements may happen in the same request. Operations are limited
            /// to add, replace and remove.
            /// </param>
            public static object Update(this IDigitalTwins operations, string id, object patchDocument)
            {
                return operations.UpdateAsync(id, patchDocument).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a digital twin
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin.
            /// </param>
            /// <param name='patchDocument'>
            /// An update specification described by JSON-patch. Updates to property values
            /// and $model elements may happen in the same request. Operations are limited
            /// to add, replace and remove.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateAsync(this IDigitalTwins operations, string id, object patchDocument, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(id, patchDocument, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves an edge which connects two digital twins.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin.
            /// </param>
            /// <param name='relationship'>
            /// The name of the relationship which is having its edges retrieved.
            /// </param>
            /// <param name='edgeId'>
            /// The id of the edge which is being retrieved
            /// </param>
            public static object GetEdgeById(this IDigitalTwins operations, string id, string relationship, string edgeId)
            {
                return operations.GetEdgeByIdAsync(id, relationship, edgeId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves an edge which connects two digital twins.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin.
            /// </param>
            /// <param name='relationship'>
            /// The name of the relationship which is having its edges retrieved.
            /// </param>
            /// <param name='edgeId'>
            /// The id of the edge which is being retrieved
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetEdgeByIdAsync(this IDigitalTwins operations, string id, string relationship, string edgeId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEdgeByIdWithHttpMessagesAsync(id, relationship, edgeId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds an edge between two digital twins.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin.
            /// </param>
            /// <param name='relationship'>
            /// The name of the relationship which is having its edges modified.
            /// </param>
            /// <param name='edgeId'>
            /// The id of the edge which is being added
            /// </param>
            /// <param name='edge'>
            /// The instance data for the edge being added
            /// </param>
            public static object AddEdge(this IDigitalTwins operations, string id, string relationship, string edgeId, object edge = default(object))
            {
                return operations.AddEdgeAsync(id, relationship, edgeId, edge).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds an edge between two digital twins.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin.
            /// </param>
            /// <param name='relationship'>
            /// The name of the relationship which is having its edges modified.
            /// </param>
            /// <param name='edgeId'>
            /// The id of the edge which is being added
            /// </param>
            /// <param name='edge'>
            /// The instance data for the edge being added
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AddEdgeAsync(this IDigitalTwins operations, string id, string relationship, string edgeId, object edge = default(object), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddEdgeWithHttpMessagesAsync(id, relationship, edgeId, edge, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an edge between two digital twins.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin.
            /// </param>
            /// <param name='relationship'>
            /// The name of the relationship which is having its edges deleted.
            /// </param>
            /// <param name='edgeId'>
            /// The id of the edge to delete.
            /// </param>
            public static void DeleteEdge(this IDigitalTwins operations, string id, string relationship, string edgeId)
            {
                operations.DeleteEdgeAsync(id, relationship, edgeId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an edge between two digital twins.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin.
            /// </param>
            /// <param name='relationship'>
            /// The name of the relationship which is having its edges deleted.
            /// </param>
            /// <param name='edgeId'>
            /// The id of the edge to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteEdgeAsync(this IDigitalTwins operations, string id, string relationship, string edgeId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteEdgeWithHttpMessagesAsync(id, relationship, edgeId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates the properties on an edge between two digital twins.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin.
            /// </param>
            /// <param name='relationship'>
            /// The name of the relationship which is having its edges modified.
            /// </param>
            /// <param name='edgeId'>
            /// The id of the edge which is being updated.
            /// </param>
            /// <param name='patchDocument'>
            /// JSON-Patch description of update to edge properties.
            /// </param>
            public static void UpdateEdge(this IDigitalTwins operations, string id, string relationship, string edgeId, object patchDocument = default(object))
            {
                operations.UpdateEdgeAsync(id, relationship, edgeId, patchDocument).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the properties on an edge between two digital twins.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin.
            /// </param>
            /// <param name='relationship'>
            /// The name of the relationship which is having its edges modified.
            /// </param>
            /// <param name='edgeId'>
            /// The id of the edge which is being updated.
            /// </param>
            /// <param name='patchDocument'>
            /// JSON-Patch description of update to edge properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateEdgeAsync(this IDigitalTwins operations, string id, string relationship, string edgeId, object patchDocument = default(object), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateEdgeWithHttpMessagesAsync(id, relationship, edgeId, patchDocument, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Retrieves the edges from a digital twin.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin.
            /// </param>
            public static EdgeCollection ListEdges(this IDigitalTwins operations, string id)
            {
                return operations.ListEdgesAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the edges from a digital twin.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EdgeCollection> ListEdgesAsync(this IDigitalTwins operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListEdgesWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves edges from a digital twin for the named relationship.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin.
            /// </param>
            /// <param name='relationship'>
            /// The name of the relationship having its edges retrieved.
            /// </param>
            public static EdgeCollection ListEdgesByRelationship(this IDigitalTwins operations, string id, string relationship)
            {
                return operations.ListEdgesByRelationshipAsync(id, relationship).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves edges from a digital twin for the named relationship.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin.
            /// </param>
            /// <param name='relationship'>
            /// The name of the relationship having its edges retrieved.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EdgeCollection> ListEdgesByRelationshipAsync(this IDigitalTwins operations, string id, string relationship, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListEdgesByRelationshipWithHttpMessagesAsync(id, relationship, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves all incoming relationships for a digital twin.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin.
            /// </param>
            public static IncomingEdgeCollection ListIncomingEdges(this IDigitalTwins operations, string id)
            {
                return operations.ListIncomingEdgesAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all incoming relationships for a digital twin.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IncomingEdgeCollection> ListIncomingEdgesAsync(this IDigitalTwins operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListIncomingEdgesWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Send telemetry from a twin
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin.
            /// </param>
            /// <param name='ceId'>
            /// A string which uniquely identifies the message
            /// </param>
            /// <param name='ceDataschema'>
            /// A string that describes the model ID (DTMI) that contains the definition
            /// for the telemetry message.
            /// </param>
            /// <param name='ceSpecversion'>
            /// A string that describes the version of the CloudEvents specification. Must
            /// be '1.0'.
            /// </param>
            /// <param name='ceType'>
            /// A string the describes the type of the message. Must be
            /// 'microsoft.iot.telemetry'.
            /// </param>
            /// <param name='telemetry'>
            /// The telemetry to emit from the instance.
            /// </param>
            /// <param name='ceDatacontenttype'>
            /// A string which describes the content type.
            /// </param>
            /// <param name='ceSubject'>
            /// A dot-seperated string that identifies the DTDL component sending the
            /// telemetry.
            /// </param>
            /// <param name='ceTime'>
            /// A string that describes the time associated with the telemetry message in
            /// RFC 3339 format.
            /// </param>
            public static void SendTelemetry(this IDigitalTwins operations, string id, string ceId, string ceDataschema, string ceSpecversion, string ceType, object telemetry = default(object), string ceDatacontenttype = default(string), string ceSubject = default(string), string ceTime = default(string))
            {
                operations.SendTelemetryAsync(id, ceId, ceDataschema, ceSpecversion, ceType, telemetry, ceDatacontenttype, ceSubject, ceTime).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Send telemetry from a twin
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin.
            /// </param>
            /// <param name='ceId'>
            /// A string which uniquely identifies the message
            /// </param>
            /// <param name='ceDataschema'>
            /// A string that describes the model ID (DTMI) that contains the definition
            /// for the telemetry message.
            /// </param>
            /// <param name='ceSpecversion'>
            /// A string that describes the version of the CloudEvents specification. Must
            /// be '1.0'.
            /// </param>
            /// <param name='ceType'>
            /// A string the describes the type of the message. Must be
            /// 'microsoft.iot.telemetry'.
            /// </param>
            /// <param name='telemetry'>
            /// The telemetry to emit from the instance.
            /// </param>
            /// <param name='ceDatacontenttype'>
            /// A string which describes the content type.
            /// </param>
            /// <param name='ceSubject'>
            /// A dot-seperated string that identifies the DTDL component sending the
            /// telemetry.
            /// </param>
            /// <param name='ceTime'>
            /// A string that describes the time associated with the telemetry message in
            /// RFC 3339 format.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SendTelemetryAsync(this IDigitalTwins operations, string id, string ceId, string ceDataschema, string ceSpecversion, string ceType, object telemetry = default(object), string ceDatacontenttype = default(string), string ceSubject = default(string), string ceTime = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SendTelemetryWithHttpMessagesAsync(id, ceId, ceDataschema, ceSpecversion, ceType, telemetry, ceDatacontenttype, ceSubject, ceTime, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Retrieves a component from a digital twin.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin.
            /// </param>
            /// <param name='componentPath'>
            /// The dotted path for the component.
            /// </param>
            public static object GetComponent(this IDigitalTwins operations, string id, string componentPath)
            {
                return operations.GetComponentAsync(id, componentPath).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a component from a digital twin.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin.
            /// </param>
            /// <param name='componentPath'>
            /// The dotted path for the component.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetComponentAsync(this IDigitalTwins operations, string id, string componentPath, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetComponentWithHttpMessagesAsync(id, componentPath, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a component on a digital twin.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin.
            /// </param>
            /// <param name='componentPath'>
            /// The dotted path for the component.
            /// </param>
            /// <param name='patchDocument'>
            /// An update specification described by JSON-patch. Updates to property values
            /// and $model elements may happen in the same request. Operations are limited
            /// to add, replace and remove.
            /// </param>
            public static object UpdateComponent(this IDigitalTwins operations, string id, string componentPath, object patchDocument = default(object))
            {
                return operations.UpdateComponentAsync(id, componentPath, patchDocument).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a component on a digital twin.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin.
            /// </param>
            /// <param name='componentPath'>
            /// The dotted path for the component.
            /// </param>
            /// <param name='patchDocument'>
            /// An update specification described by JSON-patch. Updates to property values
            /// and $model elements may happen in the same request. Operations are limited
            /// to add, replace and remove.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateComponentAsync(this IDigitalTwins operations, string id, string componentPath, object patchDocument = default(object), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateComponentWithHttpMessagesAsync(id, componentPath, patchDocument, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
